/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IPoolV1,
  IPoolV1Interface,
} from "../../../../../../../../@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IPool.sol/IPoolV1";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint64",
        name: "remoteChainSelector",
        type: "uint64",
      },
    ],
    name: "isSupportedChain",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "isSupportedToken",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "receiver",
            type: "bytes",
          },
          {
            internalType: "uint64",
            name: "remoteChainSelector",
            type: "uint64",
          },
          {
            internalType: "address",
            name: "originalSender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "localToken",
            type: "address",
          },
        ],
        internalType: "struct Pool.LockOrBurnInV1",
        name: "lockOrBurnIn",
        type: "tuple",
      },
    ],
    name: "lockOrBurn",
    outputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "destTokenAddress",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "destPoolData",
            type: "bytes",
          },
        ],
        internalType: "struct Pool.LockOrBurnOutV1",
        name: "lockOrBurnOut",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "originalSender",
            type: "bytes",
          },
          {
            internalType: "uint64",
            name: "remoteChainSelector",
            type: "uint64",
          },
          {
            internalType: "address",
            name: "receiver",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "localToken",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "sourcePoolAddress",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "sourcePoolData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "offchainTokenData",
            type: "bytes",
          },
        ],
        internalType: "struct Pool.ReleaseOrMintInV1",
        name: "releaseOrMintIn",
        type: "tuple",
      },
    ],
    name: "releaseOrMint",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "destinationAmount",
            type: "uint256",
          },
        ],
        internalType: "struct Pool.ReleaseOrMintOutV1",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IPoolV1__factory {
  static readonly abi = _abi;
  static createInterface(): IPoolV1Interface {
    return new Interface(_abi) as IPoolV1Interface;
  }
  static connect(address: string, runner?: ContractRunner | null): IPoolV1 {
    return new Contract(address, _abi, runner) as unknown as IPoolV1;
  }
}
