/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../../../common";
import type {
  Pool,
  PoolInterface,
} from "../../../../../../../@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Pool";

const _abi = [
  {
    inputs: [],
    name: "CCIP_LOCK_OR_BURN_V1_RET_BYTES",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "CCIP_POOL_V1",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "CCIP_POOL_V1_RET_BYTES",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6101bd610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c80630ccb1dfe14610050578063b7f419201461006e578063cd30939a1461008c575b600080fd5b6100586100aa565b60405161006591906100de565b60405180910390f35b6100766100af565b6040516100839190610116565b60405180910390f35b6100946100b4565b6040516100a1919061016c565b60405180910390f35b602081565b602081565b63aff2afbf60e01b81565b600063ffffffff82169050919050565b6100d8816100bf565b82525050565b60006020820190506100f360008301846100cf565b92915050565b600061ffff82169050919050565b610110816100f9565b82525050565b600060208201905061012b6000830184610107565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61016681610131565b82525050565b6000602082019050610181600083018461015d565b9291505056fea2646970667358221220cd93c1aa107afe03cc1f42e749c232f5404f1f12d3e1a08735424334aca06b5b64736f6c63430008180033";

type PoolConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PoolConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Pool__factory extends ContractFactory {
  constructor(...args: PoolConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Pool & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Pool__factory {
    return super.connect(runner) as Pool__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PoolInterface {
    return new Interface(_abi) as PoolInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Pool {
    return new Contract(address, _abi, runner) as unknown as Pool;
  }
}
