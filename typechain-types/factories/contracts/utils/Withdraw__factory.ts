/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  Withdraw,
  WithdrawInterface,
} from "../../../contracts/utils/Withdraw";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "FailedToWithdrawEth",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "OwnershipTransferRequested",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "beneficiary",
        type: "address",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "beneficiary",
        type: "address",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "withdrawToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50338060008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160362000087576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200007e90620002a7565b60405180910390fd5b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146200010e576200010d816200011760201b60201c565b5b5050506200033b565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160362000188576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200017f9062000319565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b600082825260208201905092915050565b7f43616e6e6f7420736574206f776e657220746f207a65726f0000000000000000600082015250565b60006200028f60188362000246565b91506200029c8262000257565b602082019050919050565b60006020820190508181036000830152620002c28162000280565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b60006200030160178362000246565b91506200030e82620002c9565b602082019050919050565b600060208201905081810360008301526200033481620002f2565b9050919050565b610f80806200034b6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80633aeac4e11461005c57806351cff8d91461007857806379ba5097146100945780638da5cb5b1461009e578063f2fde38b146100bc575b600080fd5b6100766004803603810190610071919061095d565b6100d8565b005b610092600480360381019061008d919061099d565b61018e565b005b61009c610252565b005b6100a66103e7565b6040516100b391906109d9565b60405180910390f35b6100d660048036038101906100d1919061099d565b610410565b005b6100e0610424565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161011b91906109d9565b602060405180830381865afa158015610138573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061015c9190610a2a565b905061018983828473ffffffffffffffffffffffffffffffffffffffff166104b49092919063ffffffff16565b505050565b610196610424565b600047905060008273ffffffffffffffffffffffffffffffffffffffff16826040516101c190610a88565b60006040518083038185875af1925050503d80600081146101fe576040519150601f19603f3d011682016040523d82523d6000602084013e610203565b606091505b505090508061024d573383836040517f9d11f56300000000000000000000000000000000000000000000000000000000815260040161024493929190610aac565b60405180910390fd5b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d990610b40565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610418610424565b6104218161053a565b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a990610bac565b60405180910390fd5b565b6105358363a9059cbb60e01b84846040516024016104d3929190610bcc565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610666565b505050565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036105a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059f90610c41565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b60006106c8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661072d9092919063ffffffff16565b905060008151111561072857808060200190518101906106e89190610c99565b610727576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071e90610d38565b60405180910390fd5b5b505050565b606061073c8484600085610745565b90509392505050565b60608247101561078a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078190610dca565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516107b39190610e50565b60006040518083038185875af1925050503d80600081146107f0576040519150601f19603f3d011682016040523d82523d6000602084013e6107f5565b606091505b509150915061080687838387610812565b92505050949350505050565b6060831561087457600083510361086c5761082c85610887565b61086b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086290610eb3565b60405180910390fd5b5b82905061087f565b61087e83836108aa565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156108bd5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f19190610f28565b60405180910390fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061092a826108ff565b9050919050565b61093a8161091f565b811461094557600080fd5b50565b60008135905061095781610931565b92915050565b60008060408385031215610974576109736108fa565b5b600061098285828601610948565b925050602061099385828601610948565b9150509250929050565b6000602082840312156109b3576109b26108fa565b5b60006109c184828501610948565b91505092915050565b6109d38161091f565b82525050565b60006020820190506109ee60008301846109ca565b92915050565b6000819050919050565b610a07816109f4565b8114610a1257600080fd5b50565b600081519050610a24816109fe565b92915050565b600060208284031215610a4057610a3f6108fa565b5b6000610a4e84828501610a15565b91505092915050565b600081905092915050565b50565b6000610a72600083610a57565b9150610a7d82610a62565b600082019050919050565b6000610a9382610a65565b9150819050919050565b610aa6816109f4565b82525050565b6000606082019050610ac160008301866109ca565b610ace60208301856109ca565b610adb6040830184610a9d565b949350505050565b600082825260208201905092915050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b6000610b2a601683610ae3565b9150610b3582610af4565b602082019050919050565b60006020820190508181036000830152610b5981610b1d565b9050919050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b6000610b96601683610ae3565b9150610ba182610b60565b602082019050919050565b60006020820190508181036000830152610bc581610b89565b9050919050565b6000604082019050610be160008301856109ca565b610bee6020830184610a9d565b9392505050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b6000610c2b601783610ae3565b9150610c3682610bf5565b602082019050919050565b60006020820190508181036000830152610c5a81610c1e565b9050919050565b60008115159050919050565b610c7681610c61565b8114610c8157600080fd5b50565b600081519050610c9381610c6d565b92915050565b600060208284031215610caf57610cae6108fa565b5b6000610cbd84828501610c84565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000610d22602a83610ae3565b9150610d2d82610cc6565b604082019050919050565b60006020820190508181036000830152610d5181610d15565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000610db4602683610ae3565b9150610dbf82610d58565b604082019050919050565b60006020820190508181036000830152610de381610da7565b9050919050565b600081519050919050565b60005b83811015610e13578082015181840152602081019050610df8565b60008484015250505050565b6000610e2a82610dea565b610e348185610a57565b9350610e44818560208601610df5565b80840191505092915050565b6000610e5c8284610e1f565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000610e9d601d83610ae3565b9150610ea882610e67565b602082019050919050565b60006020820190508181036000830152610ecc81610e90565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b6000610efa82610ed3565b610f048185610ae3565b9350610f14818560208601610df5565b610f1d81610ede565b840191505092915050565b60006020820190508181036000830152610f428184610eef565b90509291505056fea2646970667358221220bbed09cd6a6c3c9c64c38b594ffd0480de756fcd9be98a2282cbf4f1b84008b264736f6c63430008180033";

type WithdrawConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WithdrawConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Withdraw__factory extends ContractFactory {
  constructor(...args: WithdrawConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Withdraw & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Withdraw__factory {
    return super.connect(runner) as Withdraw__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WithdrawInterface {
    return new Interface(_abi) as WithdrawInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Withdraw {
    return new Contract(address, _abi, runner) as unknown as Withdraw;
  }
}
