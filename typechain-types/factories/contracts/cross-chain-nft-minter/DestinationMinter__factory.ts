/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  DestinationMinter,
  DestinationMinterInterface,
} from "../../../contracts/cross-chain-nft-minter/DestinationMinter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "router",
        type: "address",
      },
      {
        internalType: "address",
        name: "nftAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "router",
        type: "address",
      },
    ],
    name: "InvalidRouter",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [],
    name: "MintCallSuccessfull",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "messageId",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "sourceChainSelector",
            type: "uint64",
          },
          {
            internalType: "bytes",
            name: "sender",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "destTokenAmounts",
            type: "tuple[]",
          },
        ],
        internalType: "struct Client.Any2EVMMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "ccipReceive",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getRouter",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b50604051610b94380380610b9483398181016040528101906100329190610184565b81600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036100a55760006040517fd7f7333400000000000000000000000000000000000000000000000000000000815260040161009c91906101d3565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506101ee565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061015182610126565b9050919050565b61016181610146565b811461016c57600080fd5b50565b60008151905061017e81610158565b92915050565b6000806040838503121561019b5761019a610121565b5b60006101a98582860161016f565b92505060206101ba8582860161016f565b9150509250929050565b6101cd81610146565b82525050565b60006020820190506101e860008301846101c4565b92915050565b60805161098b6102096000396000610212015261098b6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806301ffc9a71461004657806385572ffb14610076578063b0f479a114610092575b600080fd5b610060600480360381019061005b919061036e565b6100b0565b60405161006d91906103b6565b60405180910390f35b610090600480360381019061008b91906103f5565b610182565b005b61009a61020e565b6040516100a7919061047f565b60405180910390f35b60007f85572ffb000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061017b57507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b61018a61020e565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101f957336040517fd7f733340000000000000000000000000000000000000000000000000000000081526004016101f0919061047f565b60405180910390fd5b61020b81610206906108ba565b610236565b50565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260600151604051610282919061093e565b6000604051808303816000865af19150503d80600081146102bf576040519150601f19603f3d011682016040523d82523d6000602084013e6102c4565b606091505b50509050806102d257600080fd5b7fa8bcb6a278444293ea5c0bce4a4734a060a5f557bb999d8a57c4f69e96f1fe8860405160405180910390a15050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61034b81610316565b811461035657600080fd5b50565b60008135905061036881610342565b92915050565b6000602082840312156103845761038361030c565b5b600061039284828501610359565b91505092915050565b60008115159050919050565b6103b08161039b565b82525050565b60006020820190506103cb60008301846103a7565b92915050565b600080fd5b600060a082840312156103ec576103eb6103d1565b5b81905092915050565b60006020828403121561040b5761040a61030c565b5b600082013567ffffffffffffffff81111561042957610428610311565b5b610435848285016103d6565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104698261043e565b9050919050565b6104798161045e565b82525050565b60006020820190506104946000830184610470565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6104e88261049f565b810181811067ffffffffffffffff82111715610507576105066104b0565b5b80604052505050565b600061051a610302565b905061052682826104df565b919050565b600080fd5b6000819050919050565b61054381610530565b811461054e57600080fd5b50565b6000813590506105608161053a565b92915050565b600067ffffffffffffffff82169050919050565b61058381610566565b811461058e57600080fd5b50565b6000813590506105a08161057a565b92915050565b600080fd5b600080fd5b600067ffffffffffffffff8211156105cb576105ca6104b0565b5b6105d48261049f565b9050602081019050919050565b82818337600083830152505050565b60006106036105fe846105b0565b610510565b90508281526020810184848401111561061f5761061e6105ab565b5b61062a8482856105e1565b509392505050565b600082601f830112610647576106466105a6565b5b81356106578482602086016105f0565b91505092915050565b600067ffffffffffffffff82111561067b5761067a6104b0565b5b602082029050602081019050919050565b600080fd5b61069a8161045e565b81146106a557600080fd5b50565b6000813590506106b781610691565b92915050565b6000819050919050565b6106d0816106bd565b81146106db57600080fd5b50565b6000813590506106ed816106c7565b92915050565b6000604082840312156107095761070861049a565b5b6107136040610510565b90506000610723848285016106a8565b6000830152506020610737848285016106de565b60208301525092915050565b600061075661075184610660565b610510565b905080838252602082019050604084028301858111156107795761077861068c565b5b835b818110156107a2578061078e88826106f3565b84526020840193505060408101905061077b565b5050509392505050565b600082601f8301126107c1576107c06105a6565b5b81356107d1848260208601610743565b91505092915050565b600060a082840312156107f0576107ef61049a565b5b6107fa60a0610510565b9050600061080a84828501610551565b600083015250602061081e84828501610591565b602083015250604082013567ffffffffffffffff8111156108425761084161052b565b5b61084e84828501610632565b604083015250606082013567ffffffffffffffff8111156108725761087161052b565b5b61087e84828501610632565b606083015250608082013567ffffffffffffffff8111156108a2576108a161052b565b5b6108ae848285016107ac565b60808301525092915050565b60006108c636836107da565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156109015780820151818401526020810190506108e6565b60008484015250505050565b6000610918826108cd565b61092281856108d8565b93506109328185602086016108e3565b80840191505092915050565b600061094a828461090d565b91508190509291505056fea264697066735822122032b6bcaccf3ce2998b576b8047d58ec2278d001cd60af0453f78071d3e3b5dcf64736f6c63430008180033";

type DestinationMinterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DestinationMinterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DestinationMinter__factory extends ContractFactory {
  constructor(...args: DestinationMinterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    router: AddressLike,
    nftAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(router, nftAddress, overrides || {});
  }
  override deploy(
    router: AddressLike,
    nftAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(router, nftAddress, overrides || {}) as Promise<
      DestinationMinter & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): DestinationMinter__factory {
    return super.connect(runner) as DestinationMinter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DestinationMinterInterface {
    return new Interface(_abi) as DestinationMinterInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): DestinationMinter {
    return new Contract(address, _abi, runner) as unknown as DestinationMinter;
  }
}
