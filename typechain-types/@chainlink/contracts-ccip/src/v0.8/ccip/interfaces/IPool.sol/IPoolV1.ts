/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../../../../common";

export declare namespace Pool {
  export type LockOrBurnInV1Struct = {
    receiver: BytesLike;
    remoteChainSelector: BigNumberish;
    originalSender: AddressLike;
    amount: BigNumberish;
    localToken: AddressLike;
  };

  export type LockOrBurnInV1StructOutput = [
    receiver: string,
    remoteChainSelector: bigint,
    originalSender: string,
    amount: bigint,
    localToken: string
  ] & {
    receiver: string;
    remoteChainSelector: bigint;
    originalSender: string;
    amount: bigint;
    localToken: string;
  };

  export type LockOrBurnOutV1Struct = {
    destTokenAddress: BytesLike;
    destPoolData: BytesLike;
  };

  export type LockOrBurnOutV1StructOutput = [
    destTokenAddress: string,
    destPoolData: string
  ] & { destTokenAddress: string; destPoolData: string };

  export type ReleaseOrMintInV1Struct = {
    originalSender: BytesLike;
    remoteChainSelector: BigNumberish;
    receiver: AddressLike;
    amount: BigNumberish;
    localToken: AddressLike;
    sourcePoolAddress: BytesLike;
    sourcePoolData: BytesLike;
    offchainTokenData: BytesLike;
  };

  export type ReleaseOrMintInV1StructOutput = [
    originalSender: string,
    remoteChainSelector: bigint,
    receiver: string,
    amount: bigint,
    localToken: string,
    sourcePoolAddress: string,
    sourcePoolData: string,
    offchainTokenData: string
  ] & {
    originalSender: string;
    remoteChainSelector: bigint;
    receiver: string;
    amount: bigint;
    localToken: string;
    sourcePoolAddress: string;
    sourcePoolData: string;
    offchainTokenData: string;
  };

  export type ReleaseOrMintOutV1Struct = { destinationAmount: BigNumberish };

  export type ReleaseOrMintOutV1StructOutput = [destinationAmount: bigint] & {
    destinationAmount: bigint;
  };
}

export interface IPoolV1Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "isSupportedChain"
      | "isSupportedToken"
      | "lockOrBurn"
      | "releaseOrMint"
      | "supportsInterface"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "isSupportedChain",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isSupportedToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lockOrBurn",
    values: [Pool.LockOrBurnInV1Struct]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseOrMint",
    values: [Pool.ReleaseOrMintInV1Struct]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "isSupportedChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSupportedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockOrBurn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseOrMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
}

export interface IPoolV1 extends BaseContract {
  connect(runner?: ContractRunner | null): IPoolV1;
  waitForDeployment(): Promise<this>;

  interface: IPoolV1Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  isSupportedChain: TypedContractMethod<
    [remoteChainSelector: BigNumberish],
    [boolean],
    "view"
  >;

  isSupportedToken: TypedContractMethod<
    [token: AddressLike],
    [boolean],
    "view"
  >;

  lockOrBurn: TypedContractMethod<
    [lockOrBurnIn: Pool.LockOrBurnInV1Struct],
    [Pool.LockOrBurnOutV1StructOutput],
    "nonpayable"
  >;

  releaseOrMint: TypedContractMethod<
    [releaseOrMintIn: Pool.ReleaseOrMintInV1Struct],
    [Pool.ReleaseOrMintOutV1StructOutput],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "isSupportedChain"
  ): TypedContractMethod<
    [remoteChainSelector: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isSupportedToken"
  ): TypedContractMethod<[token: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "lockOrBurn"
  ): TypedContractMethod<
    [lockOrBurnIn: Pool.LockOrBurnInV1Struct],
    [Pool.LockOrBurnOutV1StructOutput],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "releaseOrMint"
  ): TypedContractMethod<
    [releaseOrMintIn: Pool.ReleaseOrMintInV1Struct],
    [Pool.ReleaseOrMintOutV1StructOutput],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;

  filters: {};
}
