/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface CCIPLocalSimulatorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "configuration"
      | "getSupportedTokens"
      | "isChainSupported"
      | "requestLinkFromFaucet"
      | "supportNewTokenViaGetCCIPAdmin"
      | "supportNewTokenViaOwner"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "configuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isChainSupported",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestLinkFromFaucet",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportNewTokenViaGetCCIPAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportNewTokenViaOwner",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "configuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isChainSupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestLinkFromFaucet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportNewTokenViaGetCCIPAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportNewTokenViaOwner",
    data: BytesLike
  ): Result;
}

export interface CCIPLocalSimulator extends BaseContract {
  connect(runner?: ContractRunner | null): CCIPLocalSimulator;
  waitForDeployment(): Promise<this>;

  interface: CCIPLocalSimulatorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  configuration: TypedContractMethod<
    [],
    [
      [bigint, string, string, string, string, string, string] & {
        chainSelector_: bigint;
        sourceRouter_: string;
        destinationRouter_: string;
        wrappedNative_: string;
        linkToken_: string;
        ccipBnM_: string;
        ccipLnM_: string;
      }
    ],
    "view"
  >;

  getSupportedTokens: TypedContractMethod<
    [chainSelector: BigNumberish],
    [string[]],
    "view"
  >;

  isChainSupported: TypedContractMethod<
    [chainSelector: BigNumberish],
    [boolean],
    "view"
  >;

  requestLinkFromFaucet: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  supportNewTokenViaGetCCIPAdmin: TypedContractMethod<
    [tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  supportNewTokenViaOwner: TypedContractMethod<
    [tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "configuration"
  ): TypedContractMethod<
    [],
    [
      [bigint, string, string, string, string, string, string] & {
        chainSelector_: bigint;
        sourceRouter_: string;
        destinationRouter_: string;
        wrappedNative_: string;
        linkToken_: string;
        ccipBnM_: string;
        ccipLnM_: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSupportedTokens"
  ): TypedContractMethod<[chainSelector: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "isChainSupported"
  ): TypedContractMethod<[chainSelector: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "requestLinkFromFaucet"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportNewTokenViaGetCCIPAdmin"
  ): TypedContractMethod<[tokenAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportNewTokenViaOwner"
  ): TypedContractMethod<[tokenAddress: AddressLike], [void], "nonpayable">;

  filters: {};
}
